#!/usr/bin/env ruby

require 'rack/amqp'
require 'optparse'

options = {}

OptionParser.new do |opts|
  cmd = File.basename($0)
  opts.banner = "Usage: #{cmd} [options] <rackup file>"

  opts.on("-sSERVER", "--server SERVER", "rabbitmq server host or IP address") do |server|
    options[:rabbit_host] = server
  end

  opts.on("-pPORT", "--port PORT", "rabbitmq server port") do |port|
    options[:rabbit_port] = port.to_i
  end

  opts.on("-uUSERNAME", "--user USERNAME", "rabbitmq server username") do |user|
    options[:username] = user
  end

  opts.on("-P PASSWORD", "--pass PASSWORD", "rabbitmq server password") do |pass|
    options[:password] = pass
  end

  opts.on("-t", "--tls", "use TLS when connecting to the rabbitmq server") do |cert|
    options[:tls] = true
  end

  opts.on("-cCERT", "--cert CERT", "path to client certificate for SSL connections") do |cert|
    options[:cert_chain_file] = cert
  end

  opts.on("-kKEY", "--key KEY", "path to client private key for SSL connections") do |key|
    options[:private_key_file] = key
  end

  opts.on("-qQUEUE", "--queue QUEUE", "rabbitmq queue name for application communication") do |queue|
    options[:queue_name] = queue
  end
  
  opts.on("-D", "--daemonize", "run daemonized in the background (default: false)") do |daemonize|
    options[:daemonize] = daemonize
  end

  opts.on("--pid PID", "pid file") do |pid|
    options[:pid_file] = pid
  end

  opts.on("--log FILE", "log to file") do |file|
    options[:stdout_file] = file
  end

  opts.on("--conf FILE", "configuration file") do |file|
    options[:config] = file
  end

  opts.on("-hHEARTBEAT", "--heartbeat HEARTBEAT", "heartbeat to use when connecting to the rabbitmq-server.") do |heartbeat|
    options[:heartbeat] = heartbeat.to_i
  end

  opts.on("-rPREFETCH", "--prefetch PREFETCH", "number of messages to rcv w/o sending consumer ack") do |prefetch|
    options[:prefetch] = prefetch.to_i
  end


  opts.on("-d", "--debug", "turn on some debugging messages") do
    options[:debug] = true
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts.to_s
    exit
  end

  opts.on_tail("-v", "--version", "Show version") do
    puts "#{cmd} v#{Rack::AMQP::VERSION}"
    exit
  end

  opts.parse! ARGV
end

if conf_file = options.delete(:config)
  require conf_file
end

Rack::AMQP::Server.start options.merge(rackup_file: File.absolute_path(ARGV[0]))
